version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
      python: 3.11
    commands:
      - echo "Installing AWS CDK CLI..."
      - npm install -g aws-cdk@latest
      - cd Backend
      - npm install

  pre_build:
    commands:
      - npm run build
      - echo "=== Bootstrapping CDK Environment ==="
      - cdk bootstrap --require-approval never
      - echo "✅ CDK Bootstrap completed"

  build:
    commands:
      - |
        if [ "$ACTION" = "destroy" ]; then          
          cdk destroy CatholicCharitiesStack --force \
            --context projectName="$PROJECT_NAME" \
            --context urlFilesPath="$URL_FILES_PATH" \
            --context dataBucketName="$DATA_BUCKET_NAME" \
            --context frontendBucketName="$FRONTEND_BUCKET_NAME"
        else
          echo "=== PHASE 1: Backend Deployment ==="
          cdk deploy CatholicCharitiesStack --require-approval never \
            --context projectName="$PROJECT_NAME" \
            --context urlFilesPath="$URL_FILES_PATH" \
            --context dataBucketName="$DATA_BUCKET_NAME" \
            --context frontendBucketName="$FRONTEND_BUCKET_NAME" \
            --outputs-file outputs.json
          
          LAMBDA_FUNCTION_URL=$(cat outputs.json | jq -r '.CatholicCharitiesStack.LambdaFunctionURL // empty')
          FRONTEND_BUILD_BUCKET=$(cat outputs.json | jq -r '.CatholicCharitiesStack.FrontendBuildBucketName // empty')
          
          if [ -z "$LAMBDA_FUNCTION_URL" ] || [ -z "$FRONTEND_BUILD_BUCKET" ]; then
            echo "Error: Could not extract required outputs from CDK deployment"
            exit 1
          fi
          
          echo "=== PHASE 2: Testing Lambda Function URL Endpoints ==="
          HEALTH_RESPONSE=$(curl -s -w "%{http_code}" "${LAMBDA_FUNCTION_URL}" || echo "000")
          if echo "$HEALTH_RESPONSE" | grep -q "200"; then
            echo "✅ Lambda Function URL health check passed"
          else
            echo "⚠️ Lambda Function URL health check failed"
          fi
          
          
          echo "=== PHASE 4: Amplify App Setup ==="
          echo "Creating/updating Amplify app..."
          echo "App name: $AMPLIFY_APP_NAME"
          
          # First, try to find existing app
          AMPLIFY_APP_ID=$(aws amplify list-apps \
            --query "apps[?name=='$AMPLIFY_APP_NAME'].appId" \
            --output text)
          
          if [ -z "$AMPLIFY_APP_ID" ] || [ "$AMPLIFY_APP_ID" = "None" ]; then
            echo "No existing app found, creating new Amplify app..."
            AMPLIFY_APP_ID=$(aws amplify create-app \
              --name "$AMPLIFY_APP_NAME" \
              --platform WEB \
              --environment-variables "REACT_APP_API_BASE_URL=$LAMBDA_FUNCTION_URL,REACT_APP_CHAT_ENDPOINT=$LAMBDA_FUNCTION_URL,REACT_APP_HEALTH_ENDPOINT=$LAMBDA_FUNCTION_URL" \
              --query 'app.appId' \
              --output text)
          else
            echo "Found existing app with ID: $AMPLIFY_APP_ID"
            # Update environment variables for existing app
            aws amplify update-app \
              --app-id "$AMPLIFY_APP_ID" \
              --environment-variables "REACT_APP_API_BASE_URL=$LAMBDA_FUNCTION_URL,REACT_APP_CHAT_ENDPOINT=$LAMBDA_FUNCTION_URL,REACT_APP_HEALTH_ENDPOINT=$LAMBDA_FUNCTION_URL"
          fi
          
          echo "Final Amplify App ID: $AMPLIFY_APP_ID"
          
          if [ -z "$AMPLIFY_APP_ID" ] || [ "$AMPLIFY_APP_ID" = "None" ]; then
            echo "❌ ERROR: Failed to create or find Amplify app"
            exit 1
          fi
            
          aws amplify create-branch \
            --app-id "$AMPLIFY_APP_ID" \
            --branch-name "$AMPLIFY_BRANCH_NAME" \
            --stage PRODUCTION \
            --environment-variables "REACT_APP_API_BASE_URL=$LAMBDA_FUNCTION_URL,REACT_APP_CHAT_ENDPOINT=$LAMBDA_FUNCTION_URL,REACT_APP_HEALTH_ENDPOINT=$LAMBDA_FUNCTION_URL" \
            --no-cli-pager 2>/dev/null || echo "Branch already exists"

          aws lambda update-function-configuration \
            --function-name "$(cat outputs.json | jq -r '.CatholicCharitiesStack.AmplifyDeployerFunctionName')" \
            --environment "Variables={AMPLIFY_APP_ID=$AMPLIFY_APP_ID, AMPLIFY_BRANCH_NAME=$AMPLIFY_BRANCH_NAME}"
          
          echo "=== PHASE 5: Frontend Build and Automated Deployment ==="
          cd ../Frontend
          
          export PUBLIC_URL=""
          export GENERATE_SOURCEMAP=false
          
          echo "REACT_APP_API_BASE_URL=$LAMBDA_FUNCTION_URL" > .env.production
          echo "REACT_APP_CHAT_ENDPOINT=$LAMBDA_FUNCTION_URL" >> .env.production
          echo "REACT_APP_HEALTH_ENDPOINT=$LAMBDA_FUNCTION_URL" >> .env.production
          echo "PUBLIC_URL=" >> .env.production
          echo "GENERATE_SOURCEMAP=false" >> .env.production
          
          rm -rf build/ node_modules/.cache/
          npm ci --production=false
          npm run build
          
          if [ ! -f "build/index.html" ]; then
            echo "❌ ERROR: Build failed - index.html not found!"
            exit 1
          fi
          
          if grep -q "%PUBLIC_URL%" build/index.html; then
            echo "❌ ERROR: Build incomplete - %PUBLIC_URL% not replaced!"
            exit 1
          fi
          
          echo "✅ Build successful"
          
          cd build
          zip -r ../build.zip . -x "*.DS_Store" "*.map"
          cd ..
          
          BUILD_KEY="builds/build-$(date +%s).zip"
          aws s3 cp build.zip s3://$FRONTEND_BUILD_BUCKET/$BUILD_KEY
          
          echo "✅ Build artifact uploaded to S3: $BUILD_KEY"
          echo "🚀 Automated deployment will start via EventBridge trigger"
          echo "📱 Amplify App URL: https://$AMPLIFY_BRANCH_NAME.$AMPLIFY_APP_ID.amplifyapp.com"
          
          echo "$AMPLIFY_APP_ID" > ../amplify_app_id.txt
          
          cd ../Backend
        fi

  post_build:
    commands:
      - echo "=== Deployment Complete ==="
      - |
        if [ "$ACTION" = "deploy" ]; then
          AMPLIFY_APP_ID=$(cat ../amplify_app_id.txt 2>/dev/null || echo "")
          echo "🎉 Hybrid Deployment Summary:"
          echo "✅ Backend: Deployed via CloudFormation"
          echo "✅ Amplify App: Created/Updated via CLI"
          echo "✅ Frontend: Automated deployment triggered via S3 upload"
          echo ""
          echo "🔗 URLs:"
          echo "Chat API: ${LAMBDA_FUNCTION_URL}"
          echo "Health Check: ${LAMBDA_FUNCTION_URL}"
          if [ -n "$AMPLIFY_APP_ID" ]; then
            echo "Amplify URL: https://$AMPLIFY_BRANCH_NAME.$AMPLIFY_APP_ID.amplifyapp.com"
          fi
          echo ""
          echo "📊 Monitor:"
          echo "- Q Business data sync in Q Business Console"
          echo "- Amplify deployment in Amplify Console"
        fi

artifacts:
  files:
    - "**/*"
  base-directory: "cdk.out"
